#!/bin/bash

# Copyright 2019 Matthew Ling (sillygit@protonmail.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Automated benchmarking with mlucas for big.LITTLE architectures.
#
# Assumes environment is setup as follows:
# * mlucas binary located at ~/mlucas
# * Cluster directories present for each cluster of cores (most big.LITTLE
#   devices will have two clusters with corresponding ~/primary, ~/secondary
#   cluster directories. Some new SoCs have three clusters, use ~/tertiary)
# * Each cluster directory needs an mlucas.cfg (created when the other clusters
#   are under load in an attempt to keep the tests on the cluster we want,
#   phones have a habit of swapping processes between clusters)
# * Each cluster directory needs a cpu file specifing the cores corresponding
#   to the cluster. The contents are given verbatim to mlucas's -cpu flag,
#   so for example '0,1,2,3' or '0:3' specifies the first four cores
# * ~/results directory not present, this directory is used to gather the
#   results and the script exits if it's already present to avoid mixing up
#   benchmark data
# * Temperature plotter at ~/c3tools/plotter
# * plotter requires 'sensors', probably acquired via 'lm-sensors'. If your
#   device does not have sensors installed, comment out the plotter references
#
# The setup script helps set up the environment in this manner

# Directory to store results
resdir="results"

# Test definitions
fft=(1024 2560 4608 7680 18432)
exponent=(20000047 49005071 87068977 143472073 332220523)
duration=(3600 7200 10800 14400 36000)
testcount=${#fft[@]}

# Potential cluster directories
clusterpool=(primary secondary tertiary quaternary quinary senary septenary octonary)
clusterpoolcount=${#clusterpool[@]}

# Create results dir, or early exit if it already exists
if [ -d ~/${resdir} ]; then
 echo "~/${resdir} directory already exists, exiting to avoid a mess"
 exit 1
else
 mkdir ~/${resdir}
fi

# Find cluster directories present
cluster=()
for (( j=0; j<${clusterpoolcount}; j++ )); do
 if [ -d ~/${clusterpool[$j]} ]; then cluster+=(${clusterpool[$j]}); fi
done

clustercount=${#cluster[@]}

# Check environment is in order
if [ ! -f ~/c3tools/plotter ]; then echo "plotter missing, possible setup error" && exit 1; fi
for (( j=0; j<${clustercount}; j++ )); do
 if [ ! -e ~/${cluster[$j]}/mlucas.cfg ]; then echo "${cluster[$j]} mlucas.cfg missing, possible setup error" && exit 1; fi
 if [ ! -f ~/${cluster[$j]}/cpu ]; then echo "${cluster[$j]} cpu config missing, possible setup error" && exit 1; fi
done

for (( j=0; j<${clustercount}; j++ )); do
 # Prep worktodo for benchmarking
 if [ -f ~/${cluster[$j]}/worktodo.ini ]; then rm ~/${cluster[$j]}/worktodo.ini; fi
 ln -s ~/worktodo.ini ~/${cluster[$j]}/worktodo.ini

 # Gather mlucas.cfg into results
 cp ~/${cluster[$j]}/mlucas.cfg ~/${resdir}/mlucas.${cluster[$j]}.cfg

 # Gather cluster topology into results 
 echo "${cluster[$j]}" >>~/${resdir}/cluster.cfg
done

# Copy environment vitals into results
cat /proc/cpuinfo > ~/results/proc.cpuinfo
cat /proc/version > ~/results/proc.version

# Do tests
for (( i=0; i<${testcount}; i++ )); do

 # Edit worktodo
 echo "Test=${exponent[$i]}" >~/worktodo.ini

 # Start plotter
 ~/c3tools/plotter "${resdir}/${fft[$i]}K.temps" &

 # Start clusters
 for (( j=0; j<${clustercount}; j++ )); do
  cd ~/${cluster[$j]} && ~/mlucas -cpu $(cat ~/${cluster[$j]}/cpu) &
  sleep 1
 done

 # Sleep for test duration
 sleep 3
 date
 echo "Executing FFT ${fft[$i]}K, exponent ${exponent[$i]}, duration ~${duration[$i]} seconds"
 sleep ${duration[$i]}

 # Kill test
 pkill mlucas
 pkill plotter

 for (( j=0; j<${clustercount}; j++ )); do
  # Gather results
  mv ~/${cluster[$j]}/p${exponent[$i]}.stat ~/${resdir}/${fft[$i]}K.${cluster[$j]}.stat
  # Cleanup residuals
  rm ~/${cluster[$j]}/*${exponent[$i]}
 done

done

tar -f ~/${resdir}.tar ~/${resdir}
echo "Benchmarking complete, consider uploading ~/${resdir}.tar to mersenneforum.org to share the results"
