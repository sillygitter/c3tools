#!/bin/bash

# Copyright 2019 Matthew Ling (sillygit@protonmail.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Sets up a big.LITTLE device for primality testing with mlucas
#
# You can use the other scripts in this package to maintain non-big.LITTLE
# devices, however you should set them up manually as this script makes some
# assumptions which may apply only to big.LITTLE devices

# Sets up an environment for primality testing on big.LITTLE devices
# This includes creating the cluster directories and generating the mlucas.cfg
# files

# Potential cluster directories
clusterpool=(primary secondary tertiary quaternary quinary senary septenary octonary)
clusterpoolcount=${#clusterpool[@]}

if [ $# -gt 8 ]; then echo "Too many arguments, up to 8 clusters are supported" && exit 1; fi

# Prep environment for mlucas.cfg generation
# $$i (or any permutation tried) with for example i=1 is not equivalent to $1, so do it this way
argindex=0
for cpu in "$@"; do
 # Check that cluster directory doesn't exist
 if [ -d ~/${clusterpool[$argindex]} ]; then echo "${clusterpool[$argindex]} directory already exists, exiting to avoid making a mess" && exit 1; fi
 # Create directory
 mkdir ~/${clusterpool[$argindex]}
 # Read CPU info from args passed to this script
 echo "$cpu">~/${clusterpool[$argindex]}/cpu
 # Create a dummy mlucas.cfg and worktodo to keep this cluster busy whilst generating mlucas.cfg for other clusters
 echo "      1024  msec/iter =   42.42  ROE[avg,max] = [0.231563895, 0.281250000]  radices =  64 32 16 16  0  0  0  0  0  0">~/${clusterpool[$argindex]}/mlucas.cfg
 echo "Test=20000047">~/${clusterpool[$argindex]}/worktodo.ini
 argindex=$argindex+1
done

# Create mlucas.cfg file for each cluster one at a time
for (( i=0; i<$#; i++ )); do
 # Start dummy jobs on the other clusters to simulate realistic work conditions and to try to keep config generation on the correct cluster
 for (( j=0; j<$#; j++ )); do
  if [ $i -ne $j ]; then
   cd ~/${clusterpool[$j]} && ~/mlucas -cpu $(cat ~/${clusterpool[$j]}/cpu)
  fi
 done
 # Remove dummy mlucas.cfg
 rm ~/${clusterpool[$i]}/mlucas.cfg
 # Generate config
 cd ~/${clusterpool[$i]} && ~/mlucas -s m -cpu $(cat ~/${clusterpool[$j]}/cpu) && ~/mlucas -fftlen 18432 -iters 100 -cpu $(cat ~/${clusterpool[$j]}/cpu)
 # Kill dummy work
 pkill mlucas
 # Preserve calculated timings
 mv ~/${clusterpool[$i]}/mlucas.cfg ~/${clusterpool[$i]}/mlucas.cpy
 # Overwrite timings with dummy ones to ensure that erratic timings from
 # an aggressive governor does not cause inefficient FFTs to be used
 perl -pe 'BEGIN{$A=1;} s/ ...\d\.\d\d /$A++/ge' ~/${clusterpool[$i]}/mlucas.cpy | perl -pe 's/msec\/iter =/msec\/iter = /g' >~/${clusterpool[$i]}/mlucas.cfg

done



echo "End of setup."
