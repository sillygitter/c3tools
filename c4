#!/bin/bash

# Copyright 2019 Matthew Ling (sillygit@protonmail.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# c4 - Cellphone Compute Cluster Controller
#
# Script to help admin a cluster of nodes over ssh. Periodically run this script
# possibly as a cron job on the master computer.
#
# Aggregates nodes into a shared worktodo.ini and results.txt pool.
# primenet.py can and probably should be used to automate sending/receiving
# work. Run primenet.py with --workdir ~/.c3/ and --numcache double the total
# number of workers being administered

# Bugs galore, not for prime time yet

# Find fresh job (one that is in pool's worktodo but not assigned to a node) and assign it
function getfreshjob {
	# $1 is the node, $2 is the worker. Other variables are helpfully global
	local i=$1
	local j=$2

	# Find top job in primenet worktodo that's not assigned
	job=$(grep -v -x -f ~/.c3/worktodo.aggregate ~/.c3/worktodo.ini | head -1)

	ret=0
	if [ -z "$job" ]; then
		echo "WARNING (${user[$i]}:$j): No available job in ~/.c3/worktodo.ini to add to queue">>~/.c3/c4.log
		ret=1
	else
		echo "(${user[$i]}:$j): Adding to queue: $job">>~/.c3/c4.log
		# Add job to worker and copy so this script knows when a job has completed
		ssh -p ${port[$i]} ${user[$i]}@${address[$i]} "echo \"$job\">>~/$j/worktodo.ini && cp ~/$j/worktodo.ini ~/$j/worktodo.c4"
		# Remove job from fresh list
		echo "$job">>~/.c3/worktodo.aggregate
	fi

	return $ret
}

if [ ! -f ~/.c3/c4.cfg ]; then
	# Config does not exist, create it
	if [ ! -d ~/.c3 ]; then mkdir ~/.c3; fi
	date>>~/.c3/c4.log
	echo "Create c4 config and log file, add node information to config file">>~/.c3/c4.log

	echo -e "{" >>~/.c3/c4.cfg
	echo -e "\t\"tip\": \"JSON parser used is a little finicky and strict, avoid trailing commas\"," >>~/.c3/c4.cfg
	echo -e "\t\"nodes\": " >>~/.c3/c4.cfg
	echo -e "\t[" >>~/.c3/c4.cfg
	echo -e "\t\t{" >>~/.c3/c4.cfg
	echo -e "\t\t\t\"user\": \"\"," >>~/.c3/c4.cfg
	echo -e "\t\t\t\"address\": \"\"," >>~/.c3/c4.cfg
	echo -e "\t\t\t\"port\": \"\"," >>~/.c3/c4.cfg
	echo -e "\t\t\t\"workers\": 0" >>~/.c3/c4.cfg
	echo -e "\t\t}" >>~/.c3/c4.cfg
	echo -e "\t]" >>~/.c3/c4.cfg
	echo -e "}" >>~/.c3/c4.cfg
else
	date>>~/.c3/c4.log
fi

# Node info from config file
user=($(cat ~/.c3/c4.cfg | jq -c '.nodes[] | .user' | tr '\n' ' ' | tr -d '\"'))
address=($(cat ~/.c3/c4.cfg | jq -c '.nodes[] | .address' | tr '\n' ' ' | tr -d '\"'))
port=($(cat ~/.c3/c4.cfg | jq -c '.nodes[] | .port' | tr '\n' ' ' | tr -d '\"'))
workers=($(cat ~/.c3/c4.cfg | jq -c '.nodes[] | .workers' | tr '\n' ' ' | tr -d '\"'))

# Validate config data
if [ ${#user[@]} -ne ${#address[@]} ]; then echo "Error reading config file, every node needs the user, address, port, and worker count defined">>~/.c3/c4.log && exit 1; fi
if [ ${#user[@]} -ne ${#port[@]} ]; then echo "Error reading config file, every node needs the user, address, port, and worker count defined">>~/.c3/c4.log && exit 1; fi
if [ ${#user[@]} -ne ${#workers[@]} ]; then echo "Error reading config file, every node needs the user, address, port, and worker count defined">>~/.c3/c4.log && exit 1; fi

donesomething=0

# Do this first to remove the possibility of reassigning a completed exponent
echo "Pass 1: Gather new results"
for (( i=0; i<${#user[@]}; i++ )); do
	for (( j=0; j<${workers[$i]}; j++ )); do
		
		# Get worker working worktodo
		ssh -p ${port[$i]} ${user[$i]}@${address[$i]} "touch ~/$j/worktodo.ini"
		if [ -f ~/.c3/worktodo.tmp ]; then rm ~/.c3/worktodo.tmp; fi
		scp -P ${port[$i]} ${user[$i]}@${address[$i]}:~/$j/worktodo.ini ~/.c3/worktodo.tmp
		
		# get worker c4 worktodo
		ssh -p ${port[$i]} ${user[$i]}@${address[$i]} "touch ~/$j/worktodo.c4"
		if [ -f ~/.c3/worktodo.c4 ]; then rm ~/.c3/worktodo.c4; fi
		scp -P ${port[$i]} ${user[$i]}@${address[$i]}:~/$j/worktodo.c4 ~/.c3/worktodo.c4
		
		# Compare working worktodo and c4 worktodo to determine if there are new results
		c4count=$(cat ~/.c3/worktodo.c4 | wc -l)
		workingcount=$(cat ~/.c3/worktodo.tmp | wc -l)
		if [ $c4count -ne $workingcount ]; then
			# Copy results
			ssh -p ${port[$i]} ${user[$i]}@${address[$i]} "cp ~/$j/results.txt ~/$j/results.backup"
			scp -P ${port[$i]} ${user[$i]}@${address[$i]}:~/$j/results.txt ~/.c3/results.tmp
			cat ~/.c3/results.tmp>>~/.c3/results.txt
			ssh -p ${port[$i]} ${user[$i]}@${address[$i]} "rm ~/$j/results.txt"

			# Remove completed jobs from pooled worktodo
			cp ~/.c3/worktodo.ini ~/.c3/worktodo.pool
			grep -Fvf ~/.c3/worktodo.tmp ~/.c3/worktodo.c4 | grep -vf - ~/.c3/worktodo.pool >~/.c3/worktodo.ini

			# Update c4 worktodo to reflect that we've taken the results
			ssh -p ${port[$i]} ${user[$i]}@${address[$i]} "cp ~/$j/worktodo.ini ~/$j/worktodo.c4"

			donesomething=1
			completed=$(grep -Fvf ~/.c3/worktodo.tmp ~/.c3/worktodo.c4)
			echo "(${user[$i]}:$j): Job completed, copying results for: $completed">>~/.c3/c4.log
		fi
		
	done
done

# Find jobs in pooled worktodo already assigned
echo "Pass 2: Gather queued work"
if [ -f ~/.c3/worktodo.aggregate ]; then rm ~/.c3/worktodo.aggregate; fi
touch ~/.c3/worktodo.aggregate
for (( i=0; i<${#user[@]}; i++ )); do
	for (( j=0; j<${workers[$i]}; j++ )); do
		if [ -f ~/.c3/worktodo.tmp ]; then rm ~/.c3/worktodo.tmp; fi
		scp -P ${port[$i]} ${user[$i]}@${address[$i]}:~/$j/worktodo.ini ~/.c3/worktodo.tmp
		if [ -f ~/.c3/worktodo.tmp ]; then cat ~/.c3/worktodo.tmp>>~/.c3/worktodo.aggregate; fi
	done
done

echo "Pass 3: Assign new work"
for (( i=0; i<${#user[@]}; i++ )); do
	for (( j=0; j<${workers[$i]}; j++ )); do
		# Get worker working worktodo
		ssh -p ${port[$i]} ${user[$i]}@${address[$i]} "touch ~/$j/worktodo.ini"
		if [ -f ~/.c3/worktodo.tmp ]; then rm ~/.c3/worktodo.tmp; fi
		scp -P ${port[$i]} ${user[$i]}@${address[$i]}:~/$j/worktodo.ini ~/.c3/worktodo.tmp

		# If it has fewer than 2 lines, add more work
		queuecount=$(cat ~/.c3/worktodo.tmp | wc -l)
		if [ $queuecount -eq 0 ]; then
			getfreshjob $i $j
			getfreshjob $i $j
			donesomething=1
		fi
		if [ $queuecount -eq 1 ]; then
			getfreshjob $i $j
			donesomething=1
		fi
	done
done

if [ $donesomething -eq 0 ]; then echo "All seems well, nothing to do this time">>~/.c3/c4.log; fi

# Cleanup temp files
if [ -f ~/.c3/cpu.tmp ]; then rm ~/.c3/cpu.tmp; fi
if [ -f ~/.c3/worktodo.aggregate ]; then rm ~/.c3/worktodo.aggregate; fi
if [ -f ~/.c3/worktodo.tmp ]; then rm ~/.c3/worktodo.tmp; fi

echo "c4 complete"